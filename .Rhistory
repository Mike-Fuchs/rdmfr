library(rdmfr)
library(rdmfr)
library(rdmfr)
library(usethis)
use_package(rlist)
library(rlist)
use_package(rlist)
use_package("rlist")
library(rdmfr)
use_r("run_drift_model")
library(rdmfr)
library(SWATandR)
library(rdmfr)
library(rdmfr)
library(rdmfr)
use_r("read_drift_curve")
library(rdmfr)
use_r("read_input_files")
use_r("drift_model_input")
library(rdmfr)
library(rdmfr)
library(rdmfr)
use_r("read_landscape_drift")
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(devtools)
use_build_ignore(".git")
use_build_ignore(".Rhistory")
install.packages("styler")
library(styler)
styler:::style_active_file()
styler:::style_selection()
styler:::set_style_transformers()
styler:::style_active_pkg()
stringi::stri_escape_unicode("²")
stringi::stri_escape_unicode("³")
stringi::stri_escape_unicode(²)
stringi::stri_escape_unicode("²")
stringi::stri_escape_unicode("3")
stringi::stri_escape_unicode("³")
stringi::stri_escape_unicode("°")
styler:::style_active_pkg()
stringi::stri_escape_unicode("[m³/h]")
stringi::stri_escape_unicode("[m³/h]")
stringi::stri_escape_unicode("[°]")
stringi::stri_escape_unicode("[m³/ha]")
stringi::stri_escape_unicode("[kg/m³]")
stringi::stri_escape_unicode("[m²/s]")
stringi::stri_escape_unicode("[°C]")
stringi::stri_escape_unicode("[°]")
stringi::stri_escape_unicode("[m²/s]")
library(rdmfr)
usethis::use_tidy_description()
usethis::use_tidy_dependencies()
use_gpl_license()
help(read_landscape_drift)
search()
library(rdmfr)
library(doParallel)
vec <- c(1:1e5)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
vec <- c(1:1e5)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
#system.time(
result <- foreach::foreach(i = 1:length(vec), .combine = 'c') %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
}
parallel::stopCluster(cl)
library(rdmfr)
devtools::install_github("Mike-Fuchs/rdmfr")
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
drift_model_input()
library(rdmfr)
library(rdmfr)
generate_dsd(VMD = 134.4, DV0.1 = 59.5, DV0.9 = 236.4, Dsize = 100.0, fract_Dsize = 30.36, min_size = 45)
VMD = 134.4
DV0.1 = 59.5
DV0.9 = 236.4
Dsize = 100.0
fract_Dsize = 30.36
min_size = 45
#### initialize ####
#define variables
sd_low <- sd_up <- NA
#### read points based on input ####
# vmd
df_vmd <- data.frame(cum_fract = 0.5,
size = VMD)
ds_p <- df_vmd
# Dsize and fract_Dsize
if(!missing(Dsize) & !missing(fract_Dsize)){
df_D <- data.frame(cum_fract = fract_Dsize,
size = Dsize)
ds_p <- rbind(ds_p, df_D)
}
# Dv0.1
if(!missing(DV0.1)){
df_DV0.1 <- data.frame(cum_fract = 0.1,
size = DV0.1)
ds_p <- rbind(ds_p, df_DV0.1)
}
# Dv0.9
if(!missing(DV0.9)){
df_DV0.9 <- data.frame(cum_fract = 0.9,
size = DV0.9)
ds_p <- rbind(ds_p, df_DV0.9)
}
#min_size
if(missing(min_size)){
min_size <- 10
}
#### option 1 ####
# rel_span
if(!missing(rel_span) & missing(DV0.1) & missing(DV0.9) & missing(fract_Dsize) & missing (Dsize)){
#calculate dv01 and dv09
DV01 <- VMD - (rel_span*VMD)/2
DV09 <- VMD + (rel_span*VMD)/2
#create data frame and rbind
df_1 <- data.frame(cum_fract = c(0.1,0.9),
size = c(DV01,DV09))
ds_p <- rbind(ds_p, df_1)
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV01-VMD)/z_low
#### option 2 ####
# rel_span & DV0.1
} else if(!missing(rel_span) & !missing(DV0.1) & missing(DV0.9) & missing(fract_Dsize) & missing (Dsize)){
#calculate dv01 and dv09
DV09 <- DV0.1 + (rel_span*VMD)
#create data frame and rbind
df_2 <- data.frame(cum_fract = c(0.9),
size = c(DV09))
ds_p <- rbind(ds_p, df_2)
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV0.1-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV09-VMD)/z_up
#### option 3 ####
# rel_span & DV0.9
} else if(!missing(rel_span) & missing(DV0.1) & !missing(DV0.9) & missing(fract_Dsize) & missing (Dsize)){
#calculate dv01 and dv09
DV01 <- DV0.9 - (rel_span*VMD)
#create data frame and rbind
df_3 <- data.frame(cum_fract = c(0.1),
size = c(DV01))
ds_p <- rbind(ds_p, df_3)
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV01-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
#### option 4 ####
# rel_span & Dsize
} else if(!missing(rel_span) & missing(DV0.1) & missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
zDsize <- stats::qnorm(fract_Dsize)
sd_low <- (Dsize-VMD)/zDsize
#calculate DV01
z_low <- stats::qnorm(0.1)
DV01 <- VMD + z_low*sd_low
#calculate dv09
DV09 <- DV01 + (rel_span*VMD)
#create data frame and rbind
df_4 <- data.frame(cum_fract = c(0.1,0.9),
size = c(DV01,DV09))
ds_p <- rbind(ds_p, df_4)
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV09-VMD)/z_up
#### option 5 ####
# DV0.1 & DV0.9
} else if(missing(rel_span) & !missing(DV0.1) & !missing(DV0.9) & missing(fract_Dsize) & missing (Dsize)){
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV0.1-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
#### option 6 ####
# DV0.1 & DV0.9
} else if(missing(rel_span) & !missing(DV0.1) & !missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV0.1-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
#### option 7 ####
# Dsize & DV0.9
} else if(missing(rel_span) & missing(DV0.1) & !missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
zDsize <- stats::qnorm(fract_Dsize)
sd_low <- (Dsize-VMD)/zDsize
#calculate DV01
z_low <- stats::qnorm(0.1)
DV01 <- VMD + z_low*sd_low
#create data frame and rbind
df_7 <- data.frame(cum_fract = c(0.1),
size = c(DV01))
ds_p <- rbind(ds_p, df_7)
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
#### option 8 ####
# Dsize & DV0.1
} else if(missing(rel_span) & !missing(DV0.1) & missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
#based on Dsize
zDsize <- stats::qnorm(fract_Dsize)
sd_low1 <- (Dsize-VMD)/zDsize
#based on DV0.1
z_low <- stats::qnorm(0.1)
sd_low2 <- (DV0.1-VMD)/z_low
#mean
sd_low <- (sd_low1+sd_low2)/2
sd_up <- sd_low
#calculate DV09
z_up <- stats::qnorm(0.9)
DV09 <- VMD + z_up*sd_up
#create data frame and rbind
df_8 <- data.frame(cum_fract = c(0.9),
size = c(DV09))
ds_p <- rbind(ds_p, df_8)
#### option 9####
# Dsize
} else if(missing(rel_span) & missing(DV0.1) & missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
zDsize <- stats::qnorm(fract_Dsize)
sd_low <- (Dsize-VMD)/zDsize
sd_up <- sd_low
#calculate DV01
z_low <- stats::qnorm(0.1)
DV01 <- VMD + z_low*sd_low
#calculate DV09
z_up <- stats::qnorm(0.9)
DV09 <- VMD + z_up*sd_up
#create data frame and rbind
df_9 <- data.frame(cum_fract = c(0.1, 0.9),
size = c(DV01, DV09))
ds_p <- rbind(ds_p, df_9)
}
#check if sd_low and sd_up are available
if(is.na(sd_up)){
sd_up <- sd_low
}
if(is.na(sd_low)){
sd_low <- sd_up
}
#### calculate min and max ####
# maximal droplet size
zmax <- stats::qnorm(0.9999)
DVmax  <- VMD + zmax*sd_up
df_max_size <- data.frame(cum_fract = 1,
size = DVmax)
ds_p <- rbind(ds_p, df_max_size)
# minimal droplet size
fract_min <- 0.001
zmin <- stats::qnorm(fract_min)
DVmin  <- VMD + zmin*sd_low
if(DVmin < min_size){
DVmin <- min_size
}
df_min_size <- data.frame(cum_fract = fract_min,
size = DVmin)
ds_p <- rbind(ds_p, df_min_size)
#### fitting ####
#calculate log10 of accumulated fractions
ds_p$cum_fract_log <- log10(ds_p$cum_fract)
#shift size by min size and cum_fract_log by 3
ds_p$size <- ds_p$size - DVmin
ds_p$cum_fract_log <- ds_p$cum_fract_log + abs(log10(fract_min))
# fit nls model
model <- minpack.lm::nlsLM(cum_fract_log~abs(log10(fract_min))*(1-exp(-(a*size)^b)),
data = ds_p,
start = list(a=0.03, b=0.8))
ds_p
#### initialize ####
#define variables
sd_low <- sd_up <- NA
#### read points based on input ####
# vmd
df_vmd <- data.frame(cum_fract = 0.5,
size = VMD)
ds_p <- df_vmd
# Dsize and fract_Dsize
if(!missing(Dsize) & !missing(fract_Dsize)){
df_D <- data.frame(cum_fract = fract_Dsize,
size = Dsize)
ds_p <- rbind(ds_p, df_D)
}
# Dv0.1
if(!missing(DV0.1)){
df_DV0.1 <- data.frame(cum_fract = 0.1,
size = DV0.1)
ds_p <- rbind(ds_p, df_DV0.1)
}
# Dv0.9
if(!missing(DV0.9)){
df_DV0.9 <- data.frame(cum_fract = 0.9,
size = DV0.9)
ds_p <- rbind(ds_p, df_DV0.9)
}
#min_size
if(missing(min_size)){
min_size <- 10
}
#### option 1 ####
# rel_span
if(!missing(rel_span) & missing(DV0.1) & missing(DV0.9) & missing(fract_Dsize) & missing (Dsize)){
#calculate dv01 and dv09
DV01 <- VMD - (rel_span*VMD)/2
DV09 <- VMD + (rel_span*VMD)/2
#create data frame and rbind
df_1 <- data.frame(cum_fract = c(0.1,0.9),
size = c(DV01,DV09))
ds_p <- rbind(ds_p, df_1)
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV01-VMD)/z_low
#### option 2 ####
# rel_span & DV0.1
} else if(!missing(rel_span) & !missing(DV0.1) & missing(DV0.9) & missing(fract_Dsize) & missing (Dsize)){
#calculate dv01 and dv09
DV09 <- DV0.1 + (rel_span*VMD)
#create data frame and rbind
df_2 <- data.frame(cum_fract = c(0.9),
size = c(DV09))
ds_p <- rbind(ds_p, df_2)
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV0.1-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV09-VMD)/z_up
#### option 3 ####
# rel_span & DV0.9
} else if(!missing(rel_span) & missing(DV0.1) & !missing(DV0.9) & missing(fract_Dsize) & missing (Dsize)){
#calculate dv01 and dv09
DV01 <- DV0.9 - (rel_span*VMD)
#create data frame and rbind
df_3 <- data.frame(cum_fract = c(0.1),
size = c(DV01))
ds_p <- rbind(ds_p, df_3)
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV01-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
#### option 4 ####
# rel_span & Dsize
} else if(!missing(rel_span) & missing(DV0.1) & missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
zDsize <- stats::qnorm(fract_Dsize)
sd_low <- (Dsize-VMD)/zDsize
#calculate DV01
z_low <- stats::qnorm(0.1)
DV01 <- VMD + z_low*sd_low
#calculate dv09
DV09 <- DV01 + (rel_span*VMD)
#create data frame and rbind
df_4 <- data.frame(cum_fract = c(0.1,0.9),
size = c(DV01,DV09))
ds_p <- rbind(ds_p, df_4)
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV09-VMD)/z_up
#### option 5 ####
# DV0.1 & DV0.9
} else if(missing(rel_span) & !missing(DV0.1) & !missing(DV0.9) & missing(fract_Dsize) & missing (Dsize)){
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV0.1-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
#### option 6 ####
# DV0.1 & DV0.9
} else if(missing(rel_span) & !missing(DV0.1) & !missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV0.1-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
#### option 7 ####
# Dsize & DV0.9
} else if(missing(rel_span) & missing(DV0.1) & !missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
zDsize <- stats::qnorm(fract_Dsize)
sd_low <- (Dsize-VMD)/zDsize
#calculate DV01
z_low <- stats::qnorm(0.1)
DV01 <- VMD + z_low*sd_low
#create data frame and rbind
df_7 <- data.frame(cum_fract = c(0.1),
size = c(DV01))
ds_p <- rbind(ds_p, df_7)
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
#### option 8 ####
# Dsize & DV0.1
} else if(missing(rel_span) & !missing(DV0.1) & missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
#based on Dsize
zDsize <- stats::qnorm(fract_Dsize)
sd_low1 <- (Dsize-VMD)/zDsize
#based on DV0.1
z_low <- stats::qnorm(0.1)
sd_low2 <- (DV0.1-VMD)/z_low
#mean
sd_low <- (sd_low1+sd_low2)/2
sd_up <- sd_low
#calculate DV09
z_up <- stats::qnorm(0.9)
DV09 <- VMD + z_up*sd_up
#create data frame and rbind
df_8 <- data.frame(cum_fract = c(0.9),
size = c(DV09))
ds_p <- rbind(ds_p, df_8)
#### option 9####
# Dsize
} else if(missing(rel_span) & missing(DV0.1) & missing(DV0.9) & !missing(fract_Dsize) & !missing (Dsize)){
zDsize <- stats::qnorm(fract_Dsize)
sd_low <- (Dsize-VMD)/zDsize
sd_up <- sd_low
#calculate DV01
z_low <- stats::qnorm(0.1)
DV01 <- VMD + z_low*sd_low
#calculate DV09
z_up <- stats::qnorm(0.9)
DV09 <- VMD + z_up*sd_up
#create data frame and rbind
df_9 <- data.frame(cum_fract = c(0.1, 0.9),
size = c(DV01, DV09))
ds_p <- rbind(ds_p, df_9)
}
# determine sd_low
z_low <- stats::qnorm(0.1)
sd_low <- (DV0.1-VMD)/z_low
# determine sd_up
z_up <- stats::qnorm(0.9)
sd_up <- (DV0.9-VMD)/z_up
View(ds_p)
fract_Dsize <- 0.3036
