# setup cluster
if (!is.null(n_thread)) {
n_thread <- min(max(n_run, 1), max(n_thread, 1), parallel::detectCores())
} else {
n_thread <- min(max(n_run, 1), parallel::detectCores())
}
n_thread <- min(max(n_run, 1), parallel::detectCores())
cl <- parallel::makeCluster(n_thread)
doParallel::registerDoParallel(cl)
i_run<-1
# define header
header <- list(
application_input = data.frame(tractor_speed = "[m/s]", boom_width = "[m]", boom_height = "[m]", nozzle_angle = "[\\u00b0]", application_pres = "[kPa]", app_rate_mh = "[m\\u00b3/h]", app_rate_mha = "[m\\u00b3/ha]", app_rate_kgha = "[kg/ha]", sol_concentration = "[kg/m\\u00b3]", AI_density = "[kg/m\\u00b3]", AI_molar_mass = "[kg/mol]", AI_vapor_pressure = "[Pa]", swath_number = "[-]"),
droplet_spectrum_input = data.frame(droplet_size = "[m]", cum_fraction = "[-]"),
environment_input = data.frame(temperature = "[\\u00b0C]", humidity = "[-]", wind_speed = "[m/s]", wind_direction = "[\\u00b0]", ambient_pressure = "[Pa]",k_horizontal = "[m\\u00b2/s]", k_vertical = "[m\\u00b2/s]"))
View(header)
run_input <- input_data
# create main directory
project_path <- paste0(project_folder, "/", run_index[i_run])
dir.create(project_path, showWarnings = FALSE)
# create input folder
input_path <- paste0(project_path, "/input")
dir.create(input_path, showWarnings = FALSE)
# create output folder
output_path <- paste0(project_path, "/output")
dir.create(output_path, showWarnings = FALSE)
# application_input
sink(paste0(input_path, "/", names(run_input[1]), ".txt"))
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(run_input[[1]]))), names(run_input[[1]]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(header[[1]]))), header[[1]])), collapse = ""), useBytes = F)
for (i in 1:nrow(run_input[[1]])) {
writeLines(paste0(c(sprintf(c(rep("%20.2f", ncol(run_input[[1]]))), run_input[[1]][i, ])), collapse = ""), useBytes = F)
}
sink()
# application_input
sink(paste0(input_path, "/", names(run_input[1]), ".txt"))
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(run_input[[1]]))), names(run_input[[1]]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(header[[1]]))), header[[1]])), collapse = ""), useBytes = F)
for (i in 1:nrow(run_input[[1]])) {
writeLines(paste0(c(sprintf(c(rep("%20.2f", ncol(run_input[[1]]))), run_input[[1]][i, ])), collapse = ""), useBytes = F)
}
sink()
# droplet_spectrum_input
sink(paste0(input_path, "/", run_input$controle_input$dsd_file_name))
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(run_input[[2]]))), names(run_input[[2]]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(header[[2]]))), header[[2]])), collapse = ""), useBytes = F)
for (i in 1:nrow(run_input[[2]])) {
writeLines(paste0(c(sprintf(c("%20.8f", "%20.8f"), run_input[[2]][i, ])), collapse = ""), useBytes = F)
}
sink()
# environment_input
sink(paste0(input_path, "/", names(run_input[3]), ".txt"))
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(run_input[[3]]))), names(run_input[[3]]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(header[[3]]))), header[[3]])), collapse = ""), useBytes = F)
for (i in 1:nrow(run_input[[3]])) {
writeLines(paste0(c(sprintf(c(rep("%20.2f", ncol(run_input[[3]]))), run_input[[3]][i, ])), collapse = ""), useBytes = F)
}
sink()
# controle_input
sink(paste0(input_path, "/", names(run_input[4]), ".txt"))
writeLines(paste0(c(sprintf(c(rep("%20s", 3)), c("mode", "dep_height", "max_dist"))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c("%20.0f","%20.1f","%20.0f"), run_input[[4]][1:3])), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c("%-25s", "%-25s"), c("dsd_file_name:", run_input[[4]][4]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c("%-25s", "%-25s"), c("landscape_file_name:", run_input[[4]][5]))), collapse = ""), useBytes = F)
sink()
# move executable
split <- strsplit(executable_source, "/")[[1]]
exe_name <- split[length(split)]
exe_name
executable_source
executable_source=exe_path
# move executable
split <- strsplit(executable_source, "/")[[1]]
exe_name <- split[length(split)]
invisible(file.copy(executable_source, paste0(project_path, "/", exe_name), overwrite = F))
library(rdmfr)
\u00b0
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(tidyverse)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.11.5.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### test run ####
project_folder = paste0(run_path,"/test")
input_data = ss
executable_source = exe_path
save_file = "test_run"
return_results = T
keep_folder = T
n_run <- 1
run_index <- paste0("run_", c(1:n_run))
n_thread <- min(max(n_run, 1), parallel::detectCores())
# setup cluster
if (!is.null(n_thread)) {
n_thread <- min(max(n_run, 1), max(n_thread, 1), parallel::detectCores())
} else {
n_thread <- min(max(n_run, 1), parallel::detectCores())
}
cl <- parallel::makeCluster(n_thread)
doParallel::registerDoParallel(cl)
i_run = 1
header <- list(
application_input = data.frame(tractor_speed = "[m/s]", boom_width = "[m]", boom_height = "[m]", nozzle_angle = "[\u00b0]", application_pres = "[kPa]", app_rate_mh = "[m\u00b3/h]", app_rate_mha = "[m\u00b3/ha]", app_rate_kgha = "[kg/ha]", sol_concentration = "[kg/m\u00b3]", AI_density = "[kg/m\u00b3]", AI_molar_mass = "[kg/mol]", AI_vapor_pressure = "[Pa]", swath_number = "[-]"),
droplet_spectrum_input = data.frame(droplet_size = "[m]", cum_fraction = "[-]"),
environment_input = data.frame(temperature = "[\u00b0C]", humidity = "[-]", wind_speed = "[m/s]", wind_direction = "[\u00b0]", ambient_pressure = "[Pa]",k_horizontal = "[m\u00b2/s]", k_vertical = "[m\u00b2/s]"))
# input manipulation
if (!is.null(parameter)) {
run_input <- input_data
for (i_par in 1:nrow(parameter)) {
# find position
for (list_i in 1:5) {
if (parameter[i_par, 1] %in% names(run_input[[list_i]])) {
break()
}
}
table_i <- grep(names(run_input[[3]]), pattern = parameter[1, 1])
# change value
if (parameter[i_par, 2] == "pctchg") {
run_input[[list_i]][, table_i] <- run_input[[list_i]][, table_i] + (run_input[[list_i]][, table_i] * (as.numeric(parameter[i_par, i_run + 2]) / 100))
}
if (parameter[i_par, 2] == "absval") {
run_input[[list_i]][, table_i] <- as.numeric(parameter[i_par, i_run + 2])
}
}
} else {
run_input <- input_data
}
# create main directory
project_path <- paste0(project_folder, "/", run_index[i_run])
dir.create(project_path, showWarnings = FALSE)
# create input folder
input_path <- paste0(project_path, "/input")
dir.create(input_path, showWarnings = FALSE)
# create output folder
output_path <- paste0(project_path, "/output")
dir.create(output_path, showWarnings = FALSE)
# application_input
sink(paste0(input_path, "/", names(run_input[1]), ".txt"))
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(run_input[[1]]))), names(run_input[[1]]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(header[[1]]))), header[[1]])), collapse = ""), useBytes = F)
for (i in 1:nrow(run_input[[1]])) {
writeLines(paste0(c(sprintf(c(rep("%20.2f", ncol(run_input[[1]]))), run_input[[1]][i, ])), collapse = ""), useBytes = F)
}
sink()
# droplet_spectrum_input
sink(paste0(input_path, "/", run_input$controle_input$dsd_file_name))
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(run_input[[2]]))), names(run_input[[2]]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(header[[2]]))), header[[2]])), collapse = ""), useBytes = F)
for (i in 1:nrow(run_input[[2]])) {
writeLines(paste0(c(sprintf(c("%20.8f", "%20.8f"), run_input[[2]][i, ])), collapse = ""), useBytes = F)
}
sink()
# environment_input
sink(paste0(input_path, "/", names(run_input[3]), ".txt"))
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(run_input[[3]]))), names(run_input[[3]]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c(rep("%20s", ncol(header[[3]]))), header[[3]])), collapse = ""), useBytes = F)
for (i in 1:nrow(run_input[[3]])) {
writeLines(paste0(c(sprintf(c(rep("%20.2f", ncol(run_input[[3]]))), run_input[[3]][i, ])), collapse = ""), useBytes = F)
}
sink()
# controle_input
sink(paste0(input_path, "/", names(run_input[4]), ".txt"))
writeLines(paste0(c(sprintf(c(rep("%20s", 3)), c("mode", "dep_height", "max_dist"))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c("%20.0f","%20.1f","%20.0f"), run_input[[4]][1:3])), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c("%-25s", "%-25s"), c("dsd_file_name:", run_input[[4]][4]))), collapse = ""), useBytes = F)
writeLines(paste0(c(sprintf(c("%-25s", "%-25s"), c("landscape_file_name:", run_input[[4]][5]))), collapse = ""), useBytes = F)
sink()
# move executable
split <- strsplit(executable_source, "/")[[1]]
exe_name <- split[length(split)]
invisible(file.copy(executable_source, paste0(project_path, "/", exe_name), overwrite = F))
run_input[[4]][1, 1] == 1
run_input <- input_data
run_input[[4]][1, 1] == 1
# read drift curve
header <- read.csv(paste0(output_path, "/drift_curve_output.txt"), sep = "", header = F, nrows = 1)
data <- read.csv(paste0(output_path, "/drift_curve_output.txt"), sep = "", header = F, skip = 2)
names(data) <- header
data
library(rdmfr)
print("L\\u00e9l\\u00e0\\u00f4 ")
library(doParallel)
vec <- c(1:1e5)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
result <- foreach::foreach(i = 1:length(vec), .combine = 'c') %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
}
parallel::stopCluster(cl)
result
result <- foreach::foreach(i = 1:length(vec)) %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
}
parallel::stopCluster(cl)
vec <- c(1:1e5)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
result <- foreach::foreach(i = 1:length(vec)) %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
}
parallel::stopCluster(cl)
result
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(tidyverse)
library(gdata)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.11.5.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### test run ####
test <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/test"),
input_data = ss,
executable_source = exe_path,
save_file = "test_run",
return_results = T,
keep_folder = T)
View(test)
par <- tibble("temperature|absval"=c(10,15,20))
View(par)
test <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/test"),
+                                input_data = ss,
+                                executable_source = exe_path,
+                                save_file = "test_run2",
+                                return_results = T,
+                                keep_folder = T)
test <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/test"),
+                                input_data = ss,
+                                executable_source = exe_path,
+                                save_file = "test_run2",
+                                return_results = T,
+                                keep_folder = T,
+                                parameter = par)
test <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/test"),
+                                input_data = ss,
+                                executable_source = exe_path,
+                                save_file = "test_run2",
+                                return_results = T,
+                                keep_folder = T,
+                                parameter = par)
library(rdmfr)
library(tidyverse)
library(gdata)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.11.5.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### test run ####
test <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/test"),
input_data = ss,
executable_source = exe_path,
save_file = "test_run",
return_results = T,
keep_folder = T,
parameter = par)
View(test)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(doParallel)
vec <- c(1:1e5)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
result <- foreach::foreach(i = 1:length(vec), .combine = 'c') %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
message("test message")
}
parallel::stopCluster(cl)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
result <- foreach::foreach(i = 1:length(vec), .combine = 'c') %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
cat("test message")
}
parallel::stopCluster(cl)
error("test message")
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
result <- foreach::foreach(i = 1:length(vec), .combine = 'c', .errorhandling = "pass") %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
stop("test message")
}
parallel::stopCluster(cl)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
result <- foreach::foreach(i = 1:length(vec), .combine = 'c', .verbose = T) %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
stop("test message")
}
parallel::stopCluster(cl)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
result <- foreach::foreach(i = 1:length(vec), .combine = 'c', .verbose = T) %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
}
parallel::stopCluster(cl)
cl <- parallel::makeCluster(6)
doParallel::registerDoParallel(cl)
opts <- list(progress = progress)
result <- foreach::foreach(i = 1:length(vec), .combine = 'c', .options.snow = opts) %dopar% {
res <- vec[i]*vec[i]+vec[i]
return(res)
}
parallel::stopCluster(cl)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(rdmfr)
lubridate::now()
library(rdmfr)
library(rdmfr)
closeAllConnections()
library(rdmfr)
library(rdmfr)
library(tidyverse)
library(gdata)
library(raster)
library(rasterVis)
#library(gridExtra)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.12.1.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### eddy diffusion ####
par <- tibble("k_horizontal|absval" = rep(1,8),
"k_vertical|absval" = 10^seq(-2,0.60206,length.out = 8))
par <- par[2:8,]
eddy <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/eddy"),
input_data = ss,
parameter = par,
executable_source = exe_path,
save_file = "eddy5",
return_results = T,
keep_folder = F,
n_thread = 4,
quiet = F)
library(rdmfr)
library(rdmfr)
library(tidyverse)
library(gdata)
library(raster)
library(rasterVis)
#library(gridExtra)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.12.1.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### eddy diffusion ####
par <- tibble("k_horizontal|absval" = rep(1,8),
"k_vertical|absval" = 10^seq(-2,0.60206,length.out = 8))
par <- par[2:8,]
eddy <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/eddy"),
input_data = ss,
parameter = par,
executable_source = exe_path,
save_file = "eddy6",
return_results = T,
keep_folder = F,
n_thread = 4,
quiet = F)
unlink("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/eddy/run_1")
unlink("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/eddy/run_1",recursive = T)
library(rdmfr)
library(tidyverse)
library(gdata)
library(raster)
library(rasterVis)
#library(gridExtra)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.12.1.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### eddy diffusion ####
par <- tibble("k_horizontal|absval" = rep(1,8),
"k_vertical|absval" = 10^seq(-2,0.60206,length.out = 8))
par <- par[2:8,]
eddy <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/eddy"),
input_data = ss,
parameter = par,
executable_source = exe_path,
save_file = "eddy6",
return_results = T,
keep_folder = F,
n_thread = 4,
quiet = T)
library(rdmfr)
warnings()
library(rdmfr)
library(tidyverse)
library(gdata)
library(raster)
library(rasterVis)
#library(gridExtra)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.12.1.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### eddy diffusion ####
par <- tibble("k_horizontal|absval" = rep(1,8),
"k_vertical|absval" = 10^seq(-2,0.60206,length.out = 8))
par <- par[2:8,]
eddy <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/eddy"),
input_data = ss,
parameter = par,
executable_source = exe_path,
save_file = "eddy6",
return_results = T,
keep_folder = F,
n_thread = 4,
quiet = F)
library(rdmfr)
library(rdmfr)
library(tidyverse)
library(gdata)
library(raster)
library(rasterVis)
#library(gridExtra)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.12.1.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### eddy diffusion ####
par <- tibble("k_horizontal|absval" = rep(1,8),
"k_vertical|absval" = 10^seq(-2,0.60206,length.out = 8))
par <- par[2:8,]
eddy <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/eddy"),
input_data = ss,
parameter = par,
executable_source = exe_path,
save_file = "eddy6",
return_results = T,
keep_folder = F,
n_thread = 4,
quiet = F)
library(rdmfr)
library(rdmfr)
library(tidyverse)
library(gdata)
library(raster)
library(rasterVis)
#library(gridExtra)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.12.1.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### eddy diffusion ####
par <- tibble("k_horizontal|absval" = rep(1,8),
"k_vertical|absval" = 10^seq(-2,0.60206,length.out = 8))
par <- par[2:8,]
eddy <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/eddy"),
input_data = ss,
parameter = par,
executable_source = exe_path,
save_file = "eddy6",
return_results = T,
keep_folder = F,
n_thread = 4,
quiet = F)
library(rdmfr)
library(rdmfr)
library(rdmfr)
library(tidyverse)
library(gdata)
library(raster)
library(rasterVis)
#library(gridExtra)
# paths and data loading
run_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs"
exe_path <- "C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/runs/DriftModell_V0.12.1.exe"
ss <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/standard_scenario.rdata")
dsd <- rlist::list.load("C:/Users/FuchsMD/OneDrive - BASF/PhD/spray_drift/data/ASABE_DSD.rdata")
#### eddy diffusion ####
par <- tibble("k_horizontal|absval" = rep(1,8),
"k_vertical|absval" = 10^seq(-2,0.60206,length.out = 8))
par <- par[2:8,]
eddy <- rdmfr::run_drift_model(project_folder = paste0(run_path,"/eddy"),
input_data = ss,
parameter = par,
executable_source = exe_path,
save_file = "eddy6",
return_results = T,
keep_folder = F,
n_thread = 4,
quiet = F)
library(rdmfr)
library(rdmfr)
